# -------------------------------------------------------------------------
# Overview:
#
# Group test cases allow you to create and test groups of Coherence operations.
# You can think of a group as a function invoking one or more Coherence operations.
# As an example, a group could contain set, get, put, get calls making a total
# of four (4) Coherence NamedCache (Map) calls. You can designate threads to invoke this
# group and measure the average latency of each group (function) call.
# -------------------------------------------------------------------------

# The number of test runs. Each group has the member size set by the 
# 'memberSetSize' property. This means the total number of valid 
# legitimate transactions that return summary would be limited to
# the number of groups. Use this property to increase the number of
# transactions.
# Default: 1
testCount=1

# Interval between test runs in msec.
# Default: 0
testIntervalInMsec=0

# Print status interval in sec. The application prints status in this interval
# to the console.
# Default: 10 sec
printStatusIntervalInSec=10

# Turn off logging (recommended)
geode.logging.type=none

# Group names separated by ',' or '&'. If ',', then the next group executes after
# the current group completes. If '&', then the current group and the next group
# execute concurrently. Note that testCount applies per group. For example, if
# testCount=2 and groupName=g1&g2,g3 then g1 and g2 execute concurrently twice
# before g3 executes twice.
groupNames=g1&g2,g3&g4,g5&g6,g7&g8,g9&g10,g11&g12

# -------------------------------------------------------------------------
# Group:
#
# A group represents a function that invokes one or more Coherence NamedCache (Map) methods.
#
# name         Group name.
#
# threadCount  The number of threads per group test.
#
#              Default: (processor count * 1.5).
#
# operations  Comma separated list of operations to perform. Operations are
#             individually defined. See the "Operations" section for details.
#             The listed operations are invoked sequentially per group invocation.
#             For example, if totalInvocationCount=1000 then the operations listed
#             will be invoked 1000 times in the order they are listed.
#
# totalInvocationCount Total number of group invocations.
# 
# comment     Any text describing the group. 
# -------------------------------------------------------------------------

# -----------------------------------
# 1 KiB payload
# -----------------------------------

# g1 puts 100,000 1 KiB objects into 'map1' defined by the 'put1' operation.
g1.name=Put Test
g1.threadCount=8
g1.operations=put1
g1.comment=NamedCache.put() test (1 KiB payload in map1)
g1.totalInvocationCount=100000

# g2 bulk-puts 100,000 1 KiB objects into 'map2' using NamedCache.putAll()
g2.name=PutAll Test
g2.threadCount=8
g2.operations=putall1
g2.comment=NamedCache.putAll() test (1 KiB payload in map2)
g2.totalInvocationCount=1000

# g3 invokes NamedCache.get() on 'map1' 100,000 times
g3.name=Get Test
g3.threadCount=8
g3.operations=get1
g3.comment=NamedCache.get() test (1 KiB payload from map1)
g3.totalInvocationCount=100000

# g4 invokes NamedCache.getAll()  on 'map2'
g4.name=GetAll Test
g4.threadCount=8
g4.operations=getall1
g4.comment=NamedCache.getAll() test (1 KiB payload from map2)
g4.totalInvocationCount=10000

# -----------------------------------
# 2 KiB payload
# -----------------------------------

# g5 puts 50,000 2 KiB objects into 'map3' defined by the 'put2' operation.
g5.name=Put Test 5K
g5.threadCount=8
g5.operations=put2
g5.comment=NamedCache.put() test (2 KiB payload in map3)
g5.totalInvocationCount=100000

# g6 bulk-puts 50,000 2 KiB objects into 'map4' using NamedCache.putAll()
g6.name=PutAll Test 5K
g6.threadCount=8
g6.operations=putall2
g6.comment=NamedCache.putAll() test (2 KiB payload in map4)
g6.totalInvocationCount=1000

# g7 invokes NamedCache.get() on 'map3' 100,000 times
g7.name=Get Test
g7.threadCount=8
g7.operations=get2
g7.comment=NamedCache.get() test (10 KiB payload from map3)
g7.totalInvocationCount=100000

# g8 invokes NamedCache.getAll()  on 'map4'
g8.name=GetAll Test 10K
g8.threadCount=8
g8.operations=getall2
g8.comment=NamedCache.getAll() test (10 KiB payload from map4)
g8.totalInvocationCount=10000

# -----------------------------------
# 10 KiB payload
# -----------------------------------

# g9 puts 50,000 10 KiB objects into 'map5' defined by the 'put3' operation.
g9.name=Put Test 10K
g9.threadCount=8
g9.operations=put3
g9.comment=NamedCache.put() test (10 KiB payload in map5)
g9.totalInvocationCount=100000

# g10 bulk-puts 50,000 10 KiB objects into 'map6' using NamedCache.putAll()
g10.name=PutAll Test 10K
g10.threadCount=8
g10.operations=putall3
g10.comment=NamedCache.putAll() test (10 KiB payload in map6)
g10.totalInvocationCount=1000

# g11 invokes NamedCache.get() on 'map5' 100,000 times
g11.name=Get Test
g11.threadCount=8
g11.operations=get3
g11.comment=NamedCache.get() test (10 KiB payload from map5)
g11.totalInvocationCount=100000

# g12 invokes NamedCache.getAll()  on 'map6'
g12.name=GetAll Test 10K
g12.threadCount=8
g12.operations=getall3
g12.comment=NamedCache.getAll() test (10 KiB payload from map6)
g12.totalInvocationCount=10000

# -------------------------------------------------------------------------
# Operations:
#
# ref             The test case reference name. The defining test case inherits
#                 all values set by the referenced test case. Referenced properties
#                 are overwritten if defined.
#
# testCase        Test case.
#                 If invalid values are entered then the default value is assigned.
#
#                 Valid Test Cases: set, get, getall, get, getall.                 
#                 Default: getall                
#
# payloadSize     The value object size in bytes. The value object is a blob
#                 object containing the specified payload size in the form of
#                 byte array. Note that the key objects are String objects with
#                 the prefix defined by the key.prefix property. This property is
#                 used by the following test cases only.
#
#                 Used By: set, put, putall
#                 Default: 1024
#
# batchSize       The number of objects per putAll() or getAll() call per thread.
#
#                 Used By: putall, getall
#                 Default: 100
#
# totalEntryCount The total number of entries is used by putall, getall, and get.
#
#                 - For putall and getall, this value dictates the upper bound of
#                   the entry count. The number of objects inserted will be less
#                   than or equal to this value. To insert the exact number of entries
#                   defined by totalEntryCount, the following must hold true:
#
#                      totalEntryCount = totalInvocationCount * batchSize
#
#                 - For get, totalEntryCount defines the range in selecting
#                   keys randomly. This value is always greater than or equal
#                   to key number.
#
#                       totalEntryCount >= key-number
#
#                 Used By: putall, getall, get
#                 Default: 10000
#
# key.prefix      Key names begin with this value.
#
#                 Default: k
#
# key.startNum    Key start number. Each key name stars with the prefix defined by
#                 the key.prefix property followed by a number that is increased
#                 incrementally starting from this value. For example, 
#                 key.prefix=a and key.startNum=10 produces the first key name, "a10".
#
#                 Default: 1
# -------------------------------------------------------------------------

# -----------------------------------
# put1/get1 putall1/getall1 - 1 KiB
# -----------------------------------

# put1
put1.map=map1
put1.testCase=put
put1.payloadSize=1024
put1.key.prefix=a
put1.key.startNum=1

# putall1
putall1.map=map2
putall1.testCase=putall
putall1.totalEntryCount=100000
putall1.payloadSize=1024
putall1.batchSize=100
putall1.key.prefix=a
putall1.key.startNum=1

# get1
get1.ref=put1
get1.testCase=get
get1.totalEntryCount=100000

# getall1
getall1.ref=putall1
getall1.testCase=getall

# -----------------------------------
# put2/get2 putall2/getall2 - 2 KiB
# -----------------------------------

# put2 - 2 KiB payload
put2.map=map3
put2.testCase=put
put2.payloadSize=2048
put2.key.prefix=a
put2.key.startNum=1

# putall2 - 2 KiB payload
putall2.map=map4
putall2.testCase=putall
putall2.totalEntryCount=50000
putall2.payloadSize=2048
putall2.batchSize=100
putall2.key.prefix=a
putall2.key.startNum=1

# get2 - 2 KiB payload
get2.ref=put2
get2.testCase=get
get2.totalEntryCount=50000

# getall2 - 2 KiB payload
getall2.ref=putall2
getall2.testCase=getall

# -----------------------------------
# put3/get3 putall3/getall3 - 10 KiB
# -----------------------------------

# put3 - 10 KiB payload
put3.map=map5
put3.testCase=put
put3.payloadSize=10240
put3.key.prefix=a
put3.key.startNum=1

# putall3 - 10 KiB payload
putall3.map=map6
putall3.testCase=putall
putall3.totalEntryCount=50000
putall3.payloadSize=10240
putall3.batchSize=100
putall3.key.prefix=a
putall3.key.startNum=1

# get3 - 10 KiB payload
get3.ref=put3
get3.testCase=get
get3.totalEntryCount=50000

# getall3 - 10 KiB payload
getall3.ref=putall3
getall3.testCase=getall
