# -------------------------------------------------------------------------
# Overview:
#
# Group test cases allow you to create and test groups of Geode operations.
# You can think of a group as a function invoking one or more Geode operations.
# As an example, a group could contain set, get, put, get calls making a total
# of four (4) Geode Region (Map) calls. You can designate threads to invoke this
# group and measure the average latency of each group (function) call.
# -------------------------------------------------------------------------

# The number of test runs. Each group has the member size set by the 
# 'memberSetSize' property. This means the total number of valid 
# legitimate transactions that return summary would be limited to
# the number of groups. Use this property to increase the number of
# transactions.
# Default: 1
testCount=1

# Interval between test runs in msec.
# Default: 0
testIntervalInMsec=0

# Print status interval in sec. The application prints status in this interval
# to the console.
# Default: 10 sec
printStatusIntervalInSec=10

# Group names separated by ',' or '&'. If ',', then the next group executes after
# the current group completes. If '&', then the current group and the next group
# execute concurrently. Note that testCount applies per group. For example, if
# testCount=2 and groupName=g01&g02,g03 then g01 and g02 execute concurrently twice
# before g03 executes twice.
groupNames=g01&g02,g03&g04,g05&g06,g07&g08,g09&g10,g11&g12

# -------------------------------------------------------------------------
# Group:
#
# A group represents a function that invokes one or more Geode Region (Map) methods.
#
# name         Group name.
#
# threadCount  The number of threads per group test.
#
#              Default: (processor count * 1.5).
#
# operations  Comma separated list of operations to perform. Operations are
#             individually defined. See the "Operations" section for details.
#             The listed operations are invoked sequentially per group invocation.
#             For example, if totalInvocationCount=1000 then the operations listed
#             will be invoked 1000 times in the order they are listed.
#
# totalInvocationCount Total number of group invocations.
# 
# comment     Any text describing the group. 
# -------------------------------------------------------------------------

# -----------------------------------
# 1 KiB payload
# -----------------------------------

# g01 puts 100,000 1 KiB objects into 'map1' defined by the 'put1' operation.
g01.name=Put Test
g01.threadCount=8
g01.operations=put1
g01.comment=Region.put() test (1 KiB payload in map1)
g01.totalInvocationCount=100000

# g02 bulk-puts 100,000 1 KiB objects into 'map2' using Region.putAll()
g02.name=PutAll Test
g02.threadCount=8
g02.operations=putall1
g02.comment=Region.putAll() test (1 KiB payload in map2)
g02.totalInvocationCount=1000

# g03 invokes Region.get() on 'map1' 100,000 times
g03.name=Get Test
g03.threadCount=8
g03.operations=get1
g03.comment=Region.get() test (1 KiB payload from map1)
g03.totalInvocationCount=100000

# g04 invokes Region.getAll()  on 'map2'
g04.name=GetAll Test
g04.threadCount=8
g04.operations=getall1
g04.comment=Region.getAll() test (1 KiB payload from map2)
g04.totalInvocationCount=10000

# -----------------------------------
# 2 KiB payload
# -----------------------------------

# g05 puts 50,000 2 KiB objects into 'map3' defined by the 'put2' operation.
g05.name=Put Test 5K
g05.threadCount=8
g05.operations=put2
g05.comment=Region.put() test (2 KiB payload in map3)
g05.totalInvocationCount=100000

# g06 bulk-puts 50,000 2 KiB objects into 'map4' using Region.putAll()
g06.name=PutAll Test 5K
g06.threadCount=8
g06.operations=putall2
g06.comment=Region.putAll() test (2 KiB payload in map4)
g06.totalInvocationCount=1000

# g07 invokes Region.get() on 'map3' 100,000 times
g07.name=Get Test
g07.threadCount=8
g07.operations=get2
g07.comment=Region.get() test (10 KiB payload from map3)
g07.totalInvocationCount=100000

# g08 invokes Region.getAll()  on 'map4'
g08.name=GetAll Test 10K
g08.threadCount=8
g08.operations=getall2
g08.comment=Region.getAll() test (10 KiB payload from map4)
g08.totalInvocationCount=10000

# -----------------------------------
# 10 KiB payload
# -----------------------------------

# g09 puts 50,000 10 KiB objects into 'map5' defined by the 'put3' operation.
g09.name=Put Test 10K
g09.threadCount=8
g09.operations=put3
g09.comment=Region.put() test (10 KiB payload in map5)
g09.totalInvocationCount=100000

# g10 bulk-puts 50,000 10 KiB objects into 'map6' using Region.putAll()
g10.name=PutAll Test 10K
g10.threadCount=8
g10.operations=putall3
g10.comment=Region.putAll() test (10 KiB payload in map6)
g10.totalInvocationCount=1000

# g11 invokes Region.get() on 'map5' 100,000 times
g11.name=Get Test
g11.threadCount=8
g11.operations=get3
g11.comment=Region.get() test (10 KiB payload from map5)
g11.totalInvocationCount=100000

# g12 invokes Region.getAll()  on 'map6'
g12.name=GetAll Test 10K
g12.threadCount=8
g12.operations=getall3
g12.comment=Region.getAll() test (10 KiB payload from map6)
g12.totalInvocationCount=10000

# -------------------------------------------------------------------------
# Operations:
#
# map | region | sleep
#                 Data structure name. This parameter specifies the name of the
#                 data structure pertaining to the specified test case. If unspecified
#                 then it defaults to 'map'. Note that 'map' and 'region' are same.
#                 Specifying either one will use the GemFire Region data structure.
#
#                 The 'sleep' operation sleeps for the specified amount of time
#                 in milliseconds. It has no other attributes. For example, 
#                 'sleep10.sleep=10', sleeps for 10 milliseconds before executing
#                 the next operation in the group.
#
# ref             The test case reference name. The defining test case inherits
#                 all non-factory values set by the referenced test case. The
#                 properties that begin with 'factory.' are not inherited.
#                 Referenced properties are overwritten if defined.
#
# testCase        Test case.
#                 If invalid values are entered then the default value is assigned.
#
#                 Valid Test Cases:
#                   - region: get, getall, put, putall  - Default: putall
#
# payloadSize     The value object size in bytes. The value object is a blob
#                 object containing the specified payload size in the form of
#                 byte array. Note that the key objects are String objects with
#                 the prefix defined by the key.prefix property. This property is
#                 used by the following test cases only.
#
#                 Used By: put, putall
#                 Default: 1024
#
# batchSize       The number of objects per putAll() or getAll() call per thread.
#
#                 Used By: putall, getall
#                 Default: 100
#
# totalEntryCount The total number of entries. 
#
#                 - For putall and getall, this value dictates the upper bound
#                   of the entry count. The number of objects inserted will be less
#                   than or equal to this value. To keep the upper bound, the keys are generated
#                   in a round-robin fashion to perform updates instead of inserts if the entry
#                   count reaches the upper limit. To insert the exact number of entries
#                   defined by totalEntryCount, the following must hold true:
#
#                      totalEntryCount = totalInvocationCount * batchSize
#
#                 - For get, totalEntryCount defines the range in selecting
#                   keys randomly. This value is always greater than or equal
#                   to key number.
#
#                       totalEntryCount >= key-number
#
#                 Used By: get, getall, putall
#                 Default: 10000
#
# key.prefix      Key names begin with this value.
#
#                 Used By: get, getall, put, putall
#                 Default: k
#
# key.startNum    Key start number. Each key name stars with the prefix defined by
#                 the key.prefix property followed by a number that is increased
#                 incrementally starting from this value. For example, 
#                 key.prefix=a and key.startNum=10 produces the first key name, "a10".
#
#                 Used By: get, getall, put, putall
#                 Default: 1
# -------------------------------------------------------------------------

# -----------------------------------
# put1/get1 putall1/getall1 - 1 KiB
# -----------------------------------

# put1
put1.map=map1
put1.testCase=put
put1.payloadSize=1024
put1.key.prefix=a
put1.key.startNum=1

# putall1
putall1.map=map2
putall1.testCase=putall
putall1.totalEntryCount=100000
putall1.payloadSize=1024
putall1.batchSize=100
putall1.key.prefix=a
putall1.key.startNum=1

# get1
get1.ref=put1
get1.testCase=get
get1.totalEntryCount=100000

# getall1
getall1.ref=putall1
getall1.testCase=getall

# -----------------------------------
# put2/get2 putall2/getall2 - 2 KiB
# -----------------------------------

# put2 - 2 KiB payload
put2.map=map3
put2.testCase=put
put2.payloadSize=2048
put2.key.prefix=a
put2.key.startNum=1

# putall2 - 2 KiB payload
putall2.map=map4
putall2.testCase=putall
putall2.totalEntryCount=50000
putall2.payloadSize=2048
putall2.batchSize=100
putall2.key.prefix=a
putall2.key.startNum=1

# get2 - 2 KiB payload
get2.ref=put2
get2.testCase=get
get2.totalEntryCount=50000

# getall2 - 2 KiB payload
getall2.ref=putall2
getall2.testCase=getall

# -----------------------------------
# put3/get3 putall3/getall3 - 10 KiB
# -----------------------------------

# put3 - 10 KiB payload
put3.map=map5
put3.testCase=put
put3.payloadSize=10240
put3.key.prefix=a
put3.key.startNum=1

# putall3 - 10 KiB payload
putall3.map=map6
putall3.testCase=putall
putall3.totalEntryCount=50000
putall3.payloadSize=10240
putall3.batchSize=100
putall3.key.prefix=a
putall3.key.startNum=1

# get3 - 10 KiB payload
get3.ref=put3
get3.testCase=get
get3.totalEntryCount=50000

# getall3 - 10 KiB payload
getall3.ref=putall3
getall3.testCase=getall
